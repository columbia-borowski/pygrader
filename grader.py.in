"""ASSIGNMENT/grader.py: Grading logic for ASSIGNMENT assignment"""

from __future__ import annotations

import os
import sys

from common import printing as p
from common import submissions as subs
from common import utils as u
from common.hw_base import BaseHWManager, BaseHWSetup, BaseHWTester, directory

ALIASES = {"ASSIGNMENT"}


class SETUP(BaseHWSetup):
    """Setup logic for ASSIGNMENT assignment"""


class MANAGER(BaseHWManager):
    """Grading rubic and information for ASSIGNMENT assignment"""

    def __init__(self):
        super().__init__("ASSIGNMENT", "rubric.json", TESTER)
        try:
            u.is_dir(manager.workspace_dir)
        except ValueError:
            sys.exit("Please run hw_setup before grading")

    def get_submitters(ta: str | None = None) -> list[str]:
        # TODO return a list of submitters to grade
        return []


class TESTER(BaseHWTester):
    """Grading tests for ASSIGNMENT assignment"""

    def __init__(self, submitter: str, manager: BaseHWManager):
        super().__init__(submitter, manager)
        if not self.setup():
            sys.exit(f"Couldn't setup {submitter}'s submission!")

    def setup(self) -> bool:
        """Do any necessary setup for the submission"""
        # TODO set self.submission_dir to submission repo directory, e.g.:
        # self.submission_dir = os.path.join(self.hw_workspace, "ASSIGNMENT")
        os.chdir(self.submission_dir)
        return True

    def exit_handler(self, _signal, _frame):
        """Handler for SIGINT"""
        p.print_cyan("\n[ Exiting ASSIGNMENT grader... ]")
        self.cleanup()
        sys.exit()

    def cleanup(self):
        """Post ASSIGNMENT cleanup"""
